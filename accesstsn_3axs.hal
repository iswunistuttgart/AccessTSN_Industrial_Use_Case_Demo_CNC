#HAL config file for AccessTSN 3-Axis Demo machine

# load RT modules which are  needed
# kinematics
loadrt [KINS]KINEMATICS
#autoconverted  trivkins
# trajectory planner
#loadrt tp
# motion controller, get name ans thread period from ini file
#loadrt [KINS]KINEMATICS
loadrt  [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
# load 6 differrentatitors (for velocity and accel signals)
loadrt ddt names=ddt_x,ddt_xv,ddt_y,ddt_yv,ddt_z,ddt_zv
# load AccessTSN SHM-interface
newinst accesstsnshmif tsnif pincount=1

#add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the  code
addf ddt_x servo-thread
addf ddt_xv servo-thread
addf ddt_y servo-thread
addf ddt_yv servo-thread
addf ddt_z servo-thread
addf ddt_zv servo-thread
#link AccessTSN SHM-Iterface to code
addf tsnif.readin servo-thread
addf tsnif.writeout servo-thread

# create HAl siganels for position command from motion modules
net Xpos joint.0.motor-pos-cmd => ddt_x.in tsnif.0.xpos-set
net Ypos joint.1.motor-pos-cmd => ddt_y.in tsnif.0.ypos-set
net Zpos joint.2.motor-pos-cmd => ddt_z.in tsnif.0.zpos-set

# send position command throu differentiators to get velocities and accel signals
net Xvel ddt_x.out => ddt_xv.in
net Xacc <= ddt_xv.out
net Yvel ddt_y.out => ddt_yv.in
net Yacc <= ddt_yv.out
net Zvel ddt_z.out => ddt_zv.in
net Zacc <= ddt_zv.out

# estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in tsnif.0.estopstatus

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect AccessTSN shared memory
# current values from axis-simualtion to control
net Xpos_cur tsnif.0.xpos-cur => joint.0.motor-pos-fb
net Ypos_cur tsnif.0.ypos-cur => joint.1.motor-pos-fb
net Zpos_cur tsnif.0.zpos-cur => joint.2.motor-pos-fb
#net Xfault tsnif.0.xfault => joint.0.amp_fault_in
#net Yfault tsnif.0.yfault => joint.1.amp_fault_in
#net Zfault tsnif.0.zfault => joint.2.amp_fault_in

# set values from control to simulated axis via TSN/SHM
net Xvel_set joint.0.vel-cmd => tsnif.0.xvel-set
net Yvel_set joint.1.vel-cmd => tsnif.0.yvel-set
net Zvel_set joint.2.vel-cmd => tsnif.0.zvel-set
#or pid_x_output
net Spindlespeed spindle.0.speed-out => tsnif.0.spindlespeed
net Xenable joint.0.amp-enable-out => tsnif.0.xenable
net Yenable joint.1.amp-enable-out => tsnif.0.yenable
net Zenable joint.2.amp-enable-out => tsnif.0.zenable
net Spindleenable halui.spindle.0.is-on => tsnif.0.spindleenable

# set staus values from control to SHM
net Spindlebreak halui.spindle.0.brake-is-on => tsnif.0.spindlebrake
net Machineon halui.machine.is-on => tsnif.0.machinestatus
net Feedrate motion.current-vel => tsnif.0.feedrate
net Feedover halui.feed-override.value => tsnif.0.feedoverride
#net Cycleno motion.programline => tsnif.0.lineno
net Uptime motion-command-handler.time => tsnif.0.uptime
net Toolno halui.tool.number => tsnif.0.tool
net Modeauto halui.mode.is-auto => tsnif.0.is-auto
net Modejoint halui.mode.is-joint => tsnif.0.is-joint
net Modeman halui.mode.is-manual => tsnif.0.is-manual
net Modemdi halui.mode.is-mdi => tsnif.0.is-mdi
net Modetele halui.mode.is-teleop => tsnif.0.is-teleop

#net Xhom joint.0.home-state => tsnif.0.xhome
#net Yhom joint.1.home-state => tsnif.0.yhome
#net Zhom joint.2.home-state => tsnif.0.zhome
net Xneg joint.0.pos-hard-limit => tsnif.0.xhardneg tsnif.0.xhardpos
net Yneg joint.1.pos-hard-limit => tsnif.0.yhardneg tsnif.0.yhardpos
net Zneg joint.2.pos-hard-limit => tsnif.0.zhardneg tsnif.0.zhardpos
