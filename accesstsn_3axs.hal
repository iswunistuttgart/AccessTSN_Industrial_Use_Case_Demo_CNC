#HAL config file for AccessTSN 3-Axis Demo machine

# load RT modules which are  needed
# kinematics
loadrt trivkins
# trajectory planner
loadrt tp
# motion controller, get name ans thread period from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES kins=trivkins tp=tp
# load 6 differrentatitors (for velocity and accel signals)
loadrt ddt names=ddt_x,ddt_xv,ddt_y,ddt_yv,ddt_z,ddt_zv
# load AccessTSN SHM-interface
loadrt accesstsn_shm_interface tsn_if

#add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the  code
addf ddt_x servo-thread
addf ddt_xv servo-thread
addf ddt_y servo-thread
addf ddt_yv servo-thread
addf ddt_z servo-thread
addf ddt_zv servo-thread
#link AccessTSN SHM-Iterface to code
addf tsn_if.0 servo-thread

# create HAl siganels for position command from motion modules
net Xpos axis.0.motor-pos-cmd => ddt_x.in tsn_if.0.xpos_set
net Ypos axis.1.motor-pos-cmd => ddt_y.in tsn_if.0.ypos_set
net Zpos axis.2.motor-pos-cmd => ddt_z.in tsn_if.0.zpos_set

# send position command throu differentiators to get velocities and accel signals
net Xvel ddt_x.out => ddt_xv.in
net Xacc <= ddt_xv.out
net Yvel ddt_y.out => ddt_yv.in
net Yacc <= ddt_yv.out
net Zvel ddt_z.out => ddt_zv.in
net Zacc <= ddt_zv.out

# estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in tns_if.0.estopstatus

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect AccessTSN shared memory
# current values from axis-simualtion to control
net Xpos_cur tsn_if.0.xpos_cur => axis.0.motor-pos-fb
net Ypos_cur tsn_if.0.ypos_cur => axis.1.motor-pos-fb
net Zpos_cur tsn_if.0.zpos_cur => axis.2.motor-pos-fb
net Xfault tsn_if.0.xfault => axis.0.amp_fault_in
net Yfault tsn_if.0.yfault => axis.1.amp_fault_in
net Zfault tsn_if.0.zfault => axis.2.amp_fault_in

# set values from control to simulated axis via TSN/SHM
net Xvel_set axis.0.joint-vel-cmd => tsn_if.0.xvel_set
net Yvel_set axis.1.joint-vel-cmd => tsn_if.0.yvel_set
net Zvel_set axis.2.joint-vel-cmd => tsn_if.0.zvel_set
#or pid_x_output
net Spindlespeed motion.spindle-speed-out => tsn_if.0.spindlespeed
net Xenable axis.0.amp-enable-out => tsn_if.0.xenable
net Yenable axis.1.amp-enable-out => tsn_if.0.yenable
net Zenable axis.2.amp-enable-out => tsn_if.0.zenable
net Spindleenable halui.spindle.is-on => tsn_if.0.spindleenable

# set staus values from control to SHM
net Spindlebreak halui.spindle.branke-is-on => tsn_if.0.spindlebreak
net Machineon halui.machine.is-on => tsn_if.0.machinestatus
net Feedrate motion.current-vel => tsn_if.0.feedrate
net Feedover halui.fee_override.value => tsn_if.0.feedoverride
net Cycleno motion.programline => tsn_if.0.lineno
net Uptime motion-command-handler.time => tsn_if.0.uptime
net Toolno halui.tool.number => tsn_if.0.tool
net Modeauto halui.mode.is-auto => tsn_if.0.is_auto
net Modejoint halui.mode.is-joint => tsn_if.0.is_joint
net Modeman halui.mode.is-manual => tsn_if.0.is_manual
net Modemdi halui.mode.is-mdi => tsn_if.0.is_mdi
net Modetele halui.mode.is-teleop => tsn_if.0.is_teleop

net Xhom axis.0.home-state => tsn_if.0.xhome
net Yhom axis.1.home-state => tsn_if.0.yhome
net Zhom axis.2.home-state => tsn_if.0.zhome
net Xneg axis.0.pos-hard-limit => tsn_if.0.xhardneg tsn_if.0.xhardpos
net Yneg axis.1.pos-hard-limit => tsn_if.0.yhardneg tsn_if.0.yhardpos
net Zneg axis.2.pos-hard-limit => tsn_if.0.zhardneg tsn_if.0.zhardpos